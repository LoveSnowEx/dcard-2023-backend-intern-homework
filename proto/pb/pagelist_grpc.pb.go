// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/pb/pagelist.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PageListService_New_FullMethodName       = "/pagelist.PageListService/New"
	PageListService_Delete_FullMethodName    = "/pagelist.PageListService/Delete"
	PageListService_Begin_FullMethodName     = "/pagelist.PageListService/Begin"
	PageListService_End_FullMethodName       = "/pagelist.PageListService/End"
	PageListService_Next_FullMethodName      = "/pagelist.PageListService/Next"
	PageListService_Prev_FullMethodName      = "/pagelist.PageListService/Prev"
	PageListService_Clear_FullMethodName     = "/pagelist.PageListService/Clear"
	PageListService_Insert_FullMethodName    = "/pagelist.PageListService/Insert"
	PageListService_Erase_FullMethodName     = "/pagelist.PageListService/Erase"
	PageListService_Set_FullMethodName       = "/pagelist.PageListService/Set"
	PageListService_PushBack_FullMethodName  = "/pagelist.PageListService/PushBack"
	PageListService_PopBack_FullMethodName   = "/pagelist.PageListService/PopBack"
	PageListService_PushFront_FullMethodName = "/pagelist.PageListService/PushFront"
	PageListService_PopFront_FullMethodName  = "/pagelist.PageListService/PopFront"
)

// PageListServiceClient is the client API for PageListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageListServiceClient interface {
	New(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PageList, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
	Begin(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*PageIterator, error)
	End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*PageIterator, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*PageIterator, error)
	Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PageIterator, error)
	Clear(ctx context.Context, in *PageList, opts ...grpc.CallOption) (*Empty, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*PageIterator, error)
	Erase(ctx context.Context, in *EraseRequest, opts ...grpc.CallOption) (*PageIterator, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*PageIterator, error)
	PushBack(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PageIterator, error)
	PopBack(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*Empty, error)
	PushFront(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PageIterator, error)
	PopFront(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*Empty, error)
}

type pageListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPageListServiceClient(cc grpc.ClientConnInterface) PageListServiceClient {
	return &pageListServiceClient{cc}
}

func (c *pageListServiceClient) New(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PageList, error) {
	out := new(PageList)
	err := c.cc.Invoke(ctx, PageListService_New_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PageListService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Begin(ctx context.Context, in *BeginRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Begin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) End(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_End_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Next_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Prev(ctx context.Context, in *PrevRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Prev_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Clear(ctx context.Context, in *PageList, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PageListService_Clear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Erase(ctx context.Context, in *EraseRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Erase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) PushBack(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_PushBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) PopBack(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PageListService_PopBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) PushFront(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PageIterator, error) {
	out := new(PageIterator)
	err := c.cc.Invoke(ctx, PageListService_PushFront_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageListServiceClient) PopFront(ctx context.Context, in *PopRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, PageListService_PopFront_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageListServiceServer is the server API for PageListService service.
// All implementations must embed UnimplementedPageListServiceServer
// for forward compatibility
type PageListServiceServer interface {
	New(context.Context, *Empty) (*PageList, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
	Begin(context.Context, *BeginRequest) (*PageIterator, error)
	End(context.Context, *EndRequest) (*PageIterator, error)
	Next(context.Context, *NextRequest) (*PageIterator, error)
	Prev(context.Context, *PrevRequest) (*PageIterator, error)
	Clear(context.Context, *PageList) (*Empty, error)
	Insert(context.Context, *InsertRequest) (*PageIterator, error)
	Erase(context.Context, *EraseRequest) (*PageIterator, error)
	Set(context.Context, *SetRequest) (*PageIterator, error)
	PushBack(context.Context, *PushRequest) (*PageIterator, error)
	PopBack(context.Context, *PopRequest) (*Empty, error)
	PushFront(context.Context, *PushRequest) (*PageIterator, error)
	PopFront(context.Context, *PopRequest) (*Empty, error)
	mustEmbedUnimplementedPageListServiceServer()
}

// UnimplementedPageListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPageListServiceServer struct {
}

func (UnimplementedPageListServiceServer) New(context.Context, *Empty) (*PageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedPageListServiceServer) Delete(context.Context, *DeleteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPageListServiceServer) Begin(context.Context, *BeginRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Begin not implemented")
}
func (UnimplementedPageListServiceServer) End(context.Context, *EndRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method End not implemented")
}
func (UnimplementedPageListServiceServer) Next(context.Context, *NextRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPageListServiceServer) Prev(context.Context, *PrevRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPageListServiceServer) Clear(context.Context, *PageList) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedPageListServiceServer) Insert(context.Context, *InsertRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedPageListServiceServer) Erase(context.Context, *EraseRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Erase not implemented")
}
func (UnimplementedPageListServiceServer) Set(context.Context, *SetRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedPageListServiceServer) PushBack(context.Context, *PushRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBack not implemented")
}
func (UnimplementedPageListServiceServer) PopBack(context.Context, *PopRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopBack not implemented")
}
func (UnimplementedPageListServiceServer) PushFront(context.Context, *PushRequest) (*PageIterator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushFront not implemented")
}
func (UnimplementedPageListServiceServer) PopFront(context.Context, *PopRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopFront not implemented")
}
func (UnimplementedPageListServiceServer) mustEmbedUnimplementedPageListServiceServer() {}

// UnsafePageListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageListServiceServer will
// result in compilation errors.
type UnsafePageListServiceServer interface {
	mustEmbedUnimplementedPageListServiceServer()
}

func RegisterPageListServiceServer(s grpc.ServiceRegistrar, srv PageListServiceServer) {
	s.RegisterService(&PageListService_ServiceDesc, srv)
}

func _PageListService_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_New_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).New(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Begin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Begin(ctx, req.(*BeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_End_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).End(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Next_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Prev_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Prev(ctx, req.(*PrevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Clear(ctx, req.(*PageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Erase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Erase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Erase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Erase(ctx, req.(*EraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_PushBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).PushBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_PushBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).PushBack(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_PopBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).PopBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_PopBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).PopBack(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_PushFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).PushFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_PushFront_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).PushFront(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PageListService_PopFront_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageListServiceServer).PopFront(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PageListService_PopFront_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageListServiceServer).PopFront(ctx, req.(*PopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PageListService_ServiceDesc is the grpc.ServiceDesc for PageListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PageListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pagelist.PageListService",
	HandlerType: (*PageListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "New",
			Handler:    _PageListService_New_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PageListService_Delete_Handler,
		},
		{
			MethodName: "Begin",
			Handler:    _PageListService_Begin_Handler,
		},
		{
			MethodName: "End",
			Handler:    _PageListService_End_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _PageListService_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _PageListService_Prev_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _PageListService_Clear_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _PageListService_Insert_Handler,
		},
		{
			MethodName: "Erase",
			Handler:    _PageListService_Erase_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _PageListService_Set_Handler,
		},
		{
			MethodName: "PushBack",
			Handler:    _PageListService_PushBack_Handler,
		},
		{
			MethodName: "PopBack",
			Handler:    _PageListService_PopBack_Handler,
		},
		{
			MethodName: "PushFront",
			Handler:    _PageListService_PushFront_Handler,
		},
		{
			MethodName: "PopFront",
			Handler:    _PageListService_PopFront_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pb/pagelist.proto",
}
